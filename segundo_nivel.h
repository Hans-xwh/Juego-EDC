#pragma once

/*======================================*/
#include <iostream>
#include <Windows.h>
#include <stdlib.h>
#include <conio.h>
#include <random>
#include <chrono>  // Necesario para std::chrono
#include <string>
/*======================================*/

/*======================================*/
using namespace std;
using namespace System;
/*======================================*/

/*Matriz*/
int LaberintoMatriz[40][150] = {
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 2, 3, 4, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 3, 2, 4, 4, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 3, 2, 4, 4, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 2, 3, 4, 1 },
	{ 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 2, 2, 2, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 3, 2, 3, 3, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 2, 3, 3, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 2, 3, 3, 2, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 2, 3, 3, 2, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 4, 3, 3, 4, 2, 2, 2, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
	{ 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3, 3, 3, 2, 2, 2, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 3, 2, 3, 4, 2, 3, 4, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 3, 4, 4, 3, 4, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
	{ 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 3, 1, 4, 3, 2, 4, 3, 2, 4, 3, 2, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 1, 4, 3, 3, 4, 3, 4, 4, 3, 2, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 1, 4, 3, 3, 4, 3, 4, 4, 3, 2, 1 },
	{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 2, 1, 4, 3, 2, 4, 3, 2, 4, 3, 2, 1 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },

};

//definen la posición actual del personaje
const int perInicial_x = 1;
const int perInicial_Y = 1;

struct Personajito {	
	int x = perInicial_x;	//Horizontal inicial
	int y = perInicial_Y;	//Vertical inicial
	int height = 4; //De arriba hacia abajo
	int width = 3;

	string personaje[4] = {
	" o ",
	"-0-",
	" # ",
	"/ \\"
	};
}persona;


struct Respuestas {
	int correcta;
	int x = 0;
	int y = 0;
}respuesta;



int Pregunta(int numero, int y) {	//Mostrat pregunta
	bool continuar = false;
	Console::BackgroundColor = ConsoleColor::Black;
	Console::Clear();
	Console::ForegroundColor = ConsoleColor::DarkRed;
	Cursor(45, y); cout << "  ____                             _                    ";
	Cursor(45, y + 1); cout << " |  _ \\ _ __ ___  __ _ _   _ _ __ | |_ __ _ ___         ";
	Cursor(45, y + 2); cout << " | |_) | '__/ _ \\/ _` | | | | '_ \\| __/ _` / __|        ";
	Cursor(45, y + 3); cout << " |  __/| | |  __/ (_| | |_| | | | | || (_| \\__ \\  _ _ _ ";
	Cursor(45, y + 4); cout << " |_|   |_|  \\___|\\__, |\\__,_|_| |_|\\__\\__,_|___/ (_|_|_)";
	Cursor(45, y + 5); cout << "                 |___/                                  ";
	Sleep(3000);
	Console::Clear();

	if (numero == 1) {
		Cursor(10, y); cout << "   _____            _                    _               _                                                       _      ";
		Cursor(10, y + 1); cout << "  / ____|          | |                  | |             (_)                                                     | |     ";
		Cursor(10, y + 2); cout << " | |    _   _  __ _| |   ___  ___    ___| |  _ __   __ _ _ ___   _ __ ___   __ _ ___    __ _ _ __ __ _ _ __   __| | ___ ";
		Cursor(10, y + 3); cout << " | |   | | | |/ _` | |  / _ \\/ __|  / _ \\ | | '_ \\ / _` | / __| | '_ ` _ \\ / _` / __|  / _` | '__/ _` | '_ \\ / _` |/ _ \\";
		Cursor(10, y + 4); cout << " | |___| |_| | (_| | | |  __/\\__ \\ |  __/ | | |_) | (_| | \\__ \\ | | | | | | (_| \\__ \\ | (_| | | | (_| | | | | (_| |  __/";
		Cursor(10, y + 5); cout << "  \\_____\\__,_|\\__,_|_|  \\___||___/  \\___|_| | .__/ \\__,_|_|___/ |_| |_| |_|\\__,_|___/  \\__, |_|  \\__,_|_| |_|\\__,_|\\___|";
		Cursor(10, y + 6); cout << "                                            | |                                         __/ |                           ";
		Cursor(10, y + 7); cout << "                                            |_|                                        |___/                            ";
		respuesta.correcta = 2;

	}
	if (numero == 2) {
		Cursor(1, y);     cout << "  ____                 _                                             _                     ____     __                         _  __                 ";
		Cursor(1, y + 1); cout << " |  _ \\ ___  ___  ___ | |_   _____ _ __    ___  ___ _   _  __ _  ___(_) ___  _ __    _    |___ \\   / /         __  __    _    / | \\ \\   _____  __  __";
		Cursor(1, y + 2); cout << " | |_) / _ \\/ __|/ _ \\| \\ \\ / / _ \\ '__|  / _ \\/ __| | | |/ _` |/ __| |/ _ \\| '_ \\  (_)     __) | | |   _____  \\ \\/ /  _| |_  | |  | | |_____| \\ \\/ /";
		Cursor(1, y + 3); cout << " |  _ <  __/\\__ \\ (_) | |\\ V /  __/ |    |  __/ (__| |_| | (_| | (__| | (_) | | | |  _     / __/  | |  |_____|  >  <  |_   _| | |  | | |_____|  >  < ";
		Cursor(1, y + 4); cout << " |_| \\_\\___||___/\\___/|_| \\_/ \\___|_|     \\___|\\___|\\__,_|\\__,_|\\___|_|\\___/|_| |_| (_)   |_____| | |          /_/\\_\\   |_|   |_|  | |         /_/\\_\\";
		Cursor(1, y + 5); cout << "                                                                                                   \\_\\                            /_/                ";
		respuesta.correcta = 3;

	}
	if (numero == 3) {

		Cursor(10, y); cout << "    _   /\\/|                                      _   _              _                   _      __   _        _                  ";
		Cursor(10, y + 1); cout << "   /_\\ |/\\/  ___   ___ _ _    __ _ _  _ ___   ___| | | |_  ___ _ __ | |__ _ _ ___   _ __(_)___ /_/  | |__ _  | |  _  _ _ _  __ _ ";
		Cursor(10, y + 2); cout << "  / _ \\| ' \\/ _ \\ / -_) ' \\  / _` | || / -_) / -_) | | ' \\/ _ \\ '  \\| '_ \\ '_/ -_) | '_ \\ (_-</ _ \\ | / _` | | |_| || | ' \\/ _` |";
		Cursor(10, y + 3); cout << " /_/ \\_\\_||_\\___/ \\___|_||_| \\__, |\\_,_\\___| \\___|_| |_||_\\___/_|_|_|_.__/_| \\___| | .__/_/__/\\___/ |_\\__,_| |____\\_,_|_||_\\__,_|";
		Cursor(10, y + 4); cout << "                                |_|                                                |_|                                           ";
		respuesta.correcta = 1;
	}
	if (numero == 4) {

		Cursor(20, y);     cout << "     _         _                   _        _         ____      _       _   _       _     _           _ ";
		Cursor(20, y + 1); cout << "    / \\  _   _| |_ ___  _ __    __| | ___  | | __ _  |  _ \\ ___| | __ _| |_(_)_   _(_) __| | __ _  __| |";
		Cursor(20, y + 2); cout << "   / _ \\| | | | __/ _ \\| '__|  / _` |/ _ \\ | |/ _` | | |_) / _ \\ |/ _` | __| \\ \\ / / |/ _` |/ _` |/ _` |";
		Cursor(20, y + 3); cout << "  / ___ \\ |_| | || (_) | |    | (_| |  __/ | | (_| | |  _ <  __/ | (_| | |_| |\\ V /| | (_| | (_| | (_| |";
		Cursor(20, y + 4); cout << " /_/   \\_\\__,_|\\__\\___/|_|     \\__,_|\\___| |_|\\__,_| |_| \\_\\___|_|\\__,_|\\__|_| \\_/ |_|\\__,_|\\__,_|\\__,_|";
		Cursor(20, y + 5); cout << "                                                                                                         ";
		respuesta.correcta = 1;
	}
	Sleep(8000);
	Console::Clear();
	Cursor(68, y); cout << "  ____  ";
	Cursor(68, y + 1); cout << " |___ \\ ";
	Cursor(68, y + 2); cout << "   __) |";
	Cursor(68, y + 3); cout << "  |__ < ";
	Cursor(68, y + 4); cout << "  ___) |";
	Cursor(68, y + 5); cout << " |____/ ";
	Sleep(1000);
	Console::Clear();
	Cursor(68, y + 1); cout << "  ____  ";
	Cursor(68, y + 2); cout << " |___ \\ ";
	Cursor(68, y + 3); cout << "   __) |";
	Cursor(68, y + 4); cout << "  / __/ ";
	Cursor(68, y + 5); cout << " |_____|";
	Sleep(1000);
	Console::Clear();
	Cursor(68, y + 1); cout << "  _ ";
	Cursor(68, y + 2); cout << " / |";
	Cursor(68, y + 3); cout << " | |";
	Cursor(68, y + 4); cout << " | |";
	Cursor(68, y + 5); cout << " |_|";
	Sleep(1000);
	if (numero == 1) {
		Console::Clear();
		Cursor(40, 10); 	cout << "     _  __     ____ _     _             ";
		Cursor(40, 10 + 1); cout << "    / \\ \\ \\   / ___| |__ (_)_ __   __ _ ";
		Cursor(40, 10 + 2); cout << "   / _ \\ | | | |   | '_ \\| | '_ \\ / _` |";
		Cursor(40, 10 + 3); cout << "  / ___ \\| | | |___| | | | | | | | (_| |";
		Cursor(40, 10 + 4); cout << " /_/   \\_\\ |  \\____|_| |_|_|_| |_|\\__,_|";
		Cursor(40, 10 + 5); cout << "        /_/                              ";

		Cursor(40, 18); 	cout << " ______    ____            _       ";
		Cursor(40, 18 + 1); cout << " | __ ) \\  |  _ \\ _   _ ___(_) __ _ ";
		Cursor(40, 18 + 2); cout << " |  _ \\| | | |_) | | | / __| |/ _` |";
		Cursor(40, 18 + 3); cout << " | |_) | | |  _ <| |_| \\__ \\ | (_| |";
		Cursor(40, 18 + 4); cout << " |____/| | |_| \\_\\\\__,_|___/_|\\__,_|";
		Cursor(40, 10 + 5); cout << "      /_/                              ";

		Cursor(40, 26); 	cout << "   ______    ___           _ _       ";
		Cursor(40, 26 + 1); cout << "  / ___\\  \\ |_ _|_ __   __| (_) __ _ ";
		Cursor(40, 26 + 2); cout << " | |    | | | || '_ \\ / _` | |/ _` |";
		Cursor(40, 26 + 3); cout << " | |___ | |  | || | | | (_| | | (_| |";
		Cursor(40, 26 + 4); cout << "  \\____|| | |___|_| |_|\\__,_|_|\\__,_|";
		Cursor(40, 10 + 5); cout << "       /_/                              ";

		Cursor(40, 34); 	cout << " ______     ____                      _       ";
		Cursor(40, 34 + 1); cout << " |  _ \\ \\   / ___|__ _ _ __   __ _  __| | __ _ ";
		Cursor(40, 34 + 2); cout << " | | | | | | |   / _` | '_ \\ / _` |/ _` |/ _` |";
		Cursor(40, 34 + 3); cout << " | |_| | | | |__| (_| | | | | (_| | (_| | (_| |";
		Cursor(40, 34 + 4); cout << " |____/| | \\____\\__,_|_| |_|\\__,_|\\__,_|\\__,_|";
		Cursor(40, 10 + 5); cout << "      /_/                              ";

	}
	if (numero == 2)
	{
		Console::Clear();

		Cursor(40, 10);     cout << "      __    ____     ______  ";
		Cursor(40, 10 + 1); cout << "   __ \\ \\  |___ \\   / / ___| ";
		Cursor(40, 10 + 2); cout << "  / _` | |   __) | / /|___ \\ ";
		Cursor(40, 10 + 3); cout << " | (_| | |  / __/ / /  ___) |";
		Cursor(40, 10 + 4); cout << "  \\__,_| | |_____/_/  |____/ ";
		Cursor(40, 10 + 5); cout << "      /_/                     ";
		
		Cursor(40, 18);     cout << "  _   __    _____ ";
		Cursor(40, 18 + 1); cout << " | |__\\ \\  |___ / ";
		Cursor(40, 18 + 2); cout << " | '_ \\| |   |_ \\ ";
		Cursor(40, 18 + 3); cout << " | |_) | |  ___) |";
		Cursor(40, 18 + 4); cout << " |_.__/| | |____/ ";
		Cursor(40, 18 + 5); cout << "      /_/          ";
		
		Cursor(40, 26);     cout << "     __    ____     _______ ";
		Cursor(40, 26 + 1); cout << "   __\\ \\  |___ \\   / /___ / ";
		Cursor(40, 26 + 2); cout << "  / __| |   __) | / /  |_ \\ ";
		Cursor(40, 26 + 3); cout << " | (__| |  / __/ / /  ___) |";
		Cursor(40, 26 + 4); cout << "  \\___| | |_____/_/  |____/ ";
		Cursor(40, 26 + 5); cout << "     /_/                     ";

		Cursor(40, 34);     cout << "      ___    _    ___  _   ";
		Cursor(40, 34 + 1); cout << "   __| \\ \\  / |  / / || |  ";
		Cursor(40, 34 + 2); cout << "  / _` || | | | / /| || |_ ";
		Cursor(40, 34 + 3); cout << " | (_| || | | |/ / |__   _|";
		Cursor(40, 34 + 4); cout << "  \\__,_|| | |_/_/     |_|  ";
		Cursor(40, 34 + 5); cout << "       /_/                 ";
	}
	if (numero == 3)
	{
		Console::Clear();
		Cursor(40, 10);     cout << "         __    _  ___   __   ___  ";
		Cursor(40, 10 + 1); cout << "   __ _  \\ \\  / |/ _ \\ / /_ / _ \\ ";
		Cursor(40, 10 + 2); cout << "  / _` |  | | | | (_) | '_ \\ (_) |";
		Cursor(40, 10 + 3); cout << " | (_| |  | | | |\\__, | (_) \\__, |";
		Cursor(40, 10 + 4); cout << "  \\__,_|  | | |_|  /_/ \\___/  /_/ ";
		Cursor(40, 10 + 5); cout << "         /_/                      ";

		Cursor(40, 18);     cout << "  _   __    ____   ___ ____  ____  ";
		Cursor(40, 18 + 1); cout << " | |__\\ \\  |___ \\ / _ \\___ \\| ___| ";
		Cursor(40, 18 + 2); cout << " | '_ \\| |   __) | | | |__) |___ \\ ";
		Cursor(40, 18 + 3); cout << " | |_) | |  / __/| |_| / __/ ___) |";
		Cursor(40, 18 + 4); cout << " |_.__/| | |_____|\\___/_____|____/ ";
		Cursor(40, 18 + 5); cout << "      /_/                           ";

		Cursor(40, 26);     cout << "     __    _  ___   __   _ ";
		Cursor(40, 26 + 1); cout << "   __\\ \\  / |/ _ \\ / /_ / |";
		Cursor(40, 26 + 2); cout << "  / __| | | | (_) | '_ \\| |";
		Cursor(40, 26 + 3); cout << " | (__| | | |\\__, | (_) | |";
		Cursor(40, 26 + 4); cout << "  \\___| | |_|  /_/ \\___/|_|";
		Cursor(40, 26 + 5); cout << "     /_/                    ";

		Cursor(40, 34);     cout << "      ___    _  ___   __  _____ ";
		Cursor(40, 34 + 1); cout << "   __| \\ \\  / |/ _ \\ / /_|___ / ";
		Cursor(40, 34 + 2); cout << "  / _` || | | | (_) | '_ \\ |_ \\ ";
		Cursor(40, 34 + 3); cout << " | (_| || | | |\\__, | (_) |__) |";
		Cursor(40, 34 + 4); cout << "  \\__,_|| | |_|  /_/ \\___/____/ ";
		Cursor(40, 34 + 5); cout << "       /_/                       ";

	}
	if (numero == 4)
	{
		Console::Clear();

		Cursor(20, 10);     cout << "      __       _    _ _               _     _____ _           _       _       ";
		Cursor(20, 10 + 1); cout << "   __ \\ \\     / \\  | | |__   ___ _ __| |_  | ____(_)_ __  ___| |_ ___(_)_ __  ";
		Cursor(20, 10 + 2); cout << "  / _` | |   / _ \\ | | '_ \\ / _ \\ '__| __| |  _| | | '_ \\/ __| __/ _ \\ | '_ \\ ";
		Cursor(20, 10 + 3); cout << " | (_| | |  / ___ \\| | |_) |  __/ |  | |_  | |___| | | | \\__ \\ ||  __/ | | | |";
		Cursor(20, 10 + 4); cout << "  \\__,_| | /_/   \\_\\_|_.__/ \\___|_|   \\__| |_____|_|_| |_|___/\\__\\___|_|_| |_|";
		Cursor(20, 10 + 5); cout << "      /_/                                                                      ";
		
		Cursor(20, 18);     cout << "  _   __    _____ _               __  __           _    ";
		Cursor(20, 18 + 1); cout << " | |__\\ \\  | ____| | ___  _ __   |  \\/  |_   _ ___| | __";
		Cursor(20, 18 + 2); cout << " | '_ \\| | |  _| | |/ _ \\| '_ \\  | |\\/| | | | / __| |/ /";
		Cursor(20, 18 + 3); cout << " | |_) | | | |___| | (_) | | | | | |  | | |_| \\__ \\   < ";
		Cursor(20, 18 + 4); cout << " |_.__/| | |_____|_|\\___/|_| |_| |_|  |_|\\__,_|___/_|\\_\\";
		Cursor(20, 18 + 5); cout << "      /_/                                                ";
		
		Cursor(20, 26);     cout << "     __    _   _ _ _         _         _____         _       ";
		Cursor(20, 26 + 1); cout << "   __\\ \\  | \\ | (_) | _____ | | __ _  |_   _|__  ___| | __ _ ";
		Cursor(20, 26 + 2); cout << "  / __| | |  \\| | | |/ / _ \\| |/ _` |   | |/ _ \\/ __| |/ _` |";
		Cursor(20, 26 + 3); cout << " | (__| | | |\\  | |   < (_) | | (_| |   | |  __/\\__ \\ | (_| |";
		Cursor(20, 26 + 4); cout << "  \\___| | |_| \\_|_|_|\\_\\___/|_|\\__,_|   |_|\\___||___/_|\\__,_|";
		Cursor(20, 26 + 5); cout << "     /_/                                                      ";

		Cursor(20, 34);     cout << "      ___    ____       _               _      ___                         _          _                     ";
		Cursor(20, 34 + 1); cout << "   __| \\ \\  |  _ \\ ___ | |__   ___ _ __| |_   / _ \\ _ __  _ __   ___ _ __ | |__   ___(_)_ __ ___   ___ _ __ ";
		Cursor(20, 34 + 2); cout << "  / _` || | | |_) / _ \\| '_ \\ / _ \\ '__| __| | | | | '_ \\| '_ \\ / _ \\ '_ \\| '_ \\ / _ \\ | '_ ` _ \\ / _ \\ '__|";
		Cursor(20, 34 + 3); cout << " | (_| || | |  _ < (_) | |_) |  __/ |  | |_  | |_| | |_) | |_) |  __/ | | | | | |  __/ | | | | | |  __/ |   ";
		Cursor(20, 34 + 4); cout << "  \\__,_|| | |_| \\_\\___/|_.__/ \\___|_|   \\__|  \\___/| .__/| .__/ \\___|_| |_|_| |_|\\___|_|_| |_| |_|\\___|_|   ";
		Cursor(20, 34 + 5); cout << "       /_/                                         |_|   |_|                                                 ";

	}


	Sleep(5000);
	Console::Clear();
	continuar = true;
	if (continuar == true) {
		return 1;
	}

}

/* Respuestas aleatorias */
int NumeroRandom(int inicio,int fin) {
	static random_device rd;
	static mt19937 gen(rd());
	uniform_int_distribution<int> dist(inicio, fin);
	return dist(gen);
	
}
struct PosicionAlternativa {
	int x;
	int y;
}; PosicionAlternativa alternativa1; PosicionAlternativa alternativa2; PosicionAlternativa alternativa3; PosicionAlternativa alternativa4;

void GenerarRespuestasAleatorias() {
	int alternativasColocadas = 0;

	// Limpiar posiciones previas (opcional)
	alternativa1 = { 0, 0 };
	alternativa2 = { 0, 0 };
	alternativa3 = { 0, 0 };
	alternativa4 = { 0, 0 };

	while (alternativasColocadas < 4) {
		int randomX = NumeroRandom(5, 143);  // Margen para no spawnear en bordes
		int randomY = NumeroRandom(5, 35);   // Margen inferior y superior

		// Verificar si la posición y su alrededor están libres (valor 0 en matriz)
		bool posicionValida = true;
		for (int dy = -1; dy <= 1; dy++) {
			for (int dx = -1; dx <= 2; dx++) {  // +2 por el "A)" que ocupa 2 espacios
				if (LaberintoMatriz[randomY + dy][randomX + dx] != 0) {
					posicionValida = false;
					break;
				}
			}
			if (!posicionValida) break;
		}

		if (posicionValida) {
			Console::BackgroundColor = ConsoleColor::Red;
			Console::ForegroundColor = ConsoleColor::White;

			switch (alternativasColocadas) {
			case 0:
				Cursor(randomX, randomY);
				cout << "A)";
				alternativa1.x = randomX;
				alternativa1.y = randomY;
				if (respuesta.correcta == 1) {
					respuesta.x = randomX;
					respuesta.y = randomY;
				}
				break;

			case 1:
				Cursor(randomX, randomY);
				cout << "B)";
				alternativa2.x = randomX;
				alternativa2.y = randomY;
				if (respuesta.correcta == 2) {
					respuesta.x = randomX;
					respuesta.y = randomY;
				}
				break;

			case 2:
				Cursor(randomX, randomY);
				cout << "C)";
				alternativa3.x = randomX;
				alternativa3.y = randomY;
				if (respuesta.correcta == 3) {
					respuesta.x = randomX;
					respuesta.y = randomY;
				}
				break;

			case 3:
				Cursor(randomX, randomY);
				cout << "D)";
				alternativa4.x = randomX;
				alternativa4.y = randomY;
				if (respuesta.correcta == 4) {
					respuesta.x = randomX;
					respuesta.y = randomY;
				}
				break;
			}

			// Marcar la zona ocupada para evitar solapamientos
			LaberintoMatriz[randomY][randomX] = 5;    // 5 = alternativa (opcional)
			LaberintoMatriz[randomY][randomX + 1] = 5;

			alternativasColocadas++;
		}
	}

	// Restaurar color normal
	Console::BackgroundColor = ConsoleColor::Gray;
	Console::ForegroundColor = ConsoleColor::White;
}

/*==================*/
/*
struct Personaje2 {	//No usado
	int x;
	int y;
	Personaje2(int _x, int _y) : x(_x), y(_y) {}
	void dibujar_personaje(int fila, int columna) {
		for (int i = 0; i < 4; i++) {
			//SE MUEVE EL CURSOR PARA IMPRIMIR EL PERSONAJE DE ARRIBA HACIA ABAJO
			mover_cursor(columna, fila + i);
			Console::ForegroundColor = ConsoleColor::DarkYellow;
			cout << " " << personaje[i];
		}
	}
	void borrar_personaje(int fila, int columna) {
		for (int i = 0; i < 4; i++) {
			mover_cursor(columna, fila + i);
			cout << "    ";
		}
	}

};
*/

void configurar_ventana_mapa() {
	Console::SetWindowSize(150, 40);
	Console::BackgroundColor = ConsoleColor::DarkGray;
	Console::Clear();
	Console::CursorVisible = false;
}

void DibujarLaberinto(int matriz[40][150]) {
	for (int i = 0; i < 40; i++) {
		for (int j = 0; j < 150; j++) {
			int num = matriz[i][j];
			switch (num) {
			case 1:
				Console::BackgroundColor = ConsoleColor::Black;
				Cursor(j, i); cout << " ";
				break;
			case 2:
				Console::BackgroundColor = ConsoleColor::DarkMagenta;
				Console::ForegroundColor = ConsoleColor::DarkYellow;
				Cursor(j, i); cout << "*";
				break;
			case 3:
				Console::BackgroundColor = ConsoleColor::DarkGreen;
				Console::ForegroundColor = ConsoleColor::DarkRed;
				Cursor(j, i); cout << "+";
				break;
			case 4:
				Console::BackgroundColor = ConsoleColor::Blue;
				Console::ForegroundColor = ConsoleColor::White;
				Cursor(j, i); cout << "#";
				break;
			default:
				break;
			}
		}
	}
}

void Laberinto() {
	Console::BackgroundColor = ConsoleColor::Gray;
	Console::Clear();
	DibujarLaberinto(LaberintoMatriz);
}

void DibujaPersona(int caso) {	//HW
	Console::BackgroundColor = ConsoleColor::Gray;

	if (caso == 0) {//borrar personaje
		for (int i = 0; i < persona.height; i++) {
			Console::SetCursorPosition(persona.x, persona.y + i);
			for (int j = 0; j < persona.width; j++) {
				cout << " ";
			}
			cout << endl;
		}
		return;
	}

	//dibujar personaje
	Console::ForegroundColor = ConsoleColor::Blue; // Color Azul
	for (int i = 0; i < persona.height; i++) {
		Console::SetCursorPosition(persona.x, persona.y + i);
		cout << persona.personaje[i];
	}
}

//Colision con paredes de laberinto para movimiento
bool checkColi(int x, int y) { //false=NoMover  true=SiMover
	for (int i = 0; i < persona.height; i++) {
		for (int j = 0; j < persona.width; j++) {
			if (LaberintoMatriz[y + i][x + j] == 1) {
				return false;
			}
		}
	}
	return true;

}

void MostrarPantallaNegra() {
	Console::BackgroundColor = ConsoleColor::Black;
	Console::Clear();
	Console::ForegroundColor = ConsoleColor::White;
	Cursor(60, 20);
	cout << "Has encontrado una alternativa";
	Sleep(1000);
	return;

}

/// No usado ///
int VerificarColisionAlternativas() {
	// Verificar colisión con la primera alternativa (A)
	if ((persona.x >= alternativa1.x && persona.x <= alternativa1.x + 2) &&
		(persona.y >= alternativa1.y && persona.y <= alternativa1.y + 1)) 
	{
		MostrarPantallaNegra();
		return 1;
	}
	// Verificar colisión con la segunda alternativa (B)
	else if ((persona.x >= alternativa2.x && persona.x <= alternativa2.x + 2) &&
		(persona.y >= alternativa2.y && persona.y <= alternativa2.y + 1)) 
	{
		MostrarPantallaNegra();
		return 1;
	}
	// Verificar colisión con tecera alternativa (C)
	else if ((persona.x >= alternativa3.x && persona.x <= alternativa3.x + 2) &&
		(persona.y >= alternativa3.y && persona.y <= alternativa3.y + 1)) 
	{
		MostrarPantallaNegra();
		return 1;
	}
	// Verificar colisión con la cuarta alternativa (D)
	else if ((persona.x >= alternativa4.x && persona.x <= alternativa4.x + 2) &&
		(persona.y >= alternativa4.y && persona.y <= alternativa4.y + 1)) 
	{
		MostrarPantallaNegra();
		return 1;
	}
	else {
		return 0;
	}
}

bool checkAlternColi(int x, int y) {	//Check Alternativas Collision
	for (int i = 0; i < persona.height; i++) {
		for (int j = 0; j < persona.width; j++) {
			if (j+x == respuesta.x && i+y == respuesta.y) {
				return true;
			}
		}
	}
	return false;
}

void GanasteTemporal() {
	Console::ForegroundColor = ConsoleColor::White;
	Console::BackgroundColor = ConsoleColor::Black;
	Console::Clear();
	Cursor(47, 15); cout << " _ _____                                    _        _ " << endl;
	Cursor(47, 16); cout << "(_) ____|___    ___ ___  _ __ _ __ ___  ___| |_ ___ | |" << endl;
	Cursor(47, 17); cout << "| |  _| / __|  / __/ _ \\| '__| '__/ _ \\/ __| __/ _ \\| |" << endl;
	Cursor(47, 18); cout << "| | |___\\__ \\ | (_| (_) | |  | | |  __/ (__| || (_) |_|" << endl;
	Cursor(47, 19); cout << "|_|_____|___/  \\___\\___/|_|  |_|  \\___|\\___|\\__\\___/(_)" << endl;

	Sleep(2000);
}
void TiempoFuera() {
	Console::ForegroundColor = ConsoleColor::White;
	Console::BackgroundColor = ConsoleColor::Black;
	Console::Clear();
	Cursor(40, 15); cout << " _ _____ _                              _____                     _ " << endl;
	Cursor(40, 16); cout << "(_)_   _(_) ___ _ __ ___  _ __   ___   |  ___|   _  ___ _ __ __ _| |" << endl;
	Cursor(40, 17); cout << "| | | | | |/ _ \\ '_ ` _ \\| '_ \\ / _ \\  | |_ | | | |/ _ \\ '__/ _` | |" << endl;
	Cursor(40, 18); cout << "| | | | | |  __/ | | | | | |_) | (_) | |  _|| |_| |  __/ | | (_| |_|" << endl;
	Cursor(40, 19); cout << "|_| |_| |_|\\___|_| |_| |_| .__/ \\___/| |_|   \\__,_|\\___|_|  \\__,_(_)" << endl;
	Cursor(40, 20); cout << "                         |_|                                       ";
	Sleep(2000);
}

/* Funcion Principal del juego */
void ejecutar_segundo_nivel(int po) {		//po = PreguntaOffset	
	Window();

	configurar_ventana_mapa();
	int NumeroPregunta = 1+po;

	int cambio = Pregunta(NumeroPregunta, 15);
	cout << cambio << endl << NumeroPregunta;
	//system("pause");
	Laberinto();
	GenerarRespuestasAleatorias();
	/*La forma de obtener las coordenadas de las alternativas aleatorias es 
	* alternativa1.x y alternativa1.y
	* alternativa2.x y alternativa2.y
	* alternativa3.x y alternativa3.y
	* alternativa4.x y alternativa4.y
	*/

	// Configurar el contador de tiempo
	Console::ForegroundColor = ConsoleColor::White;
	Console::BackgroundColor = ConsoleColor::Black;
	Cursor(130, 0); 
	cout << "Tiempo: 0s ";

	//El Steady_clock mide 2 puntos de tiempo
	//En este caso, guarda el momento inicial
	auto tiempo_inicio = chrono::steady_clock::now(); // Iniciar el cronómetro


	int tecla = 0;
	Console::BackgroundColor = ConsoleColor::Gray;
	DibujaPersona(1);
	const int tiempoLimite = 60;	//Esta constante define el tiempo maximo

	while (true) {	//Bucle principal segundo nivel -Hw
		// Actualizar el contador de tiempo cada segundo
		//En este caso, guarda el momento final
		auto tiempo_real = chrono::steady_clock::now();
		//El count() sirve para obtener el valor numerico al usar el duration cast
		//duration cast convierte varios tipo de intervalos de tiempo ya sea segundos o milisegundos
		auto Cronometro = chrono::duration_cast<chrono::seconds>(tiempo_real - tiempo_inicio).count();

		Console::ForegroundColor = ConsoleColor::White;
		Console::BackgroundColor = ConsoleColor::Black;
		//Cursor(130, 0); cout << "Tiempo: " << Cronometro << "s";		//Mostrat tiempo transcurrido
		Cursor(130, 0); cout << "Tiempo: " << tiempoLimite - Cronometro << "s ";

		if (tiempoLimite - Cronometro <= 0) {
			TiempoFuera();
			break;
		}

		if (_kbhit()) {
			tecla = _getch(); //72=arriba 75=izquierda 77=derecha  80=abajo

			if (tecla == 72 && persona.y - 1 > 0) { //mover hacia arriba
				if (checkColi(persona.x, persona.y - 1)) {
					DibujaPersona(0); //caso 0 = borrar
					persona.y--;
					DibujaPersona(1); //caso 1 = dibujar
				}
			}
			else if (tecla == 80 && persona.y + persona.height + 1 < 40) { //mover hacia abajo
				if (checkColi(persona.x, persona.y + 1)) {
					DibujaPersona(0);
					persona.y++;
					DibujaPersona(1);
				}
			}
			else if (tecla == 75 && persona.x - 1 > 0) { //mover hacia izquierda
				if (checkColi(persona.x - 1, persona.y)) {
					DibujaPersona(0);
					persona.x--;
					DibujaPersona(1);
				}
			}
			else if (tecla == 77 && persona.x + persona.width + 1 < 150) { //mover hacia derecha
				if (checkColi(persona.x + 1, persona.y)) {
					DibujaPersona(0);
					persona.x++;
					DibujaPersona(1);
				}
			}
		}
		if (checkAlternColi(persona.x, persona.y)) {
			GanasteTemporal();

			persona.x = perInicial_x;
			persona.y = perInicial_Y;
			return;
		}
		Sleep(10); // Pequeña pausa para no saturar la CPU
	}
}


void ProgresoFinal() {
	Console::ForegroundColor = ConsoleColor::Yellow;
	Cursor(110, 2);
	cout << "HAS COMPLETADO EL JUEGO";
	Cursor(110, 4);
	cout << "FELICIDADES JUGADOR!!";
	Console::ForegroundColor = ConsoleColor::Yellow;
	
	Cursor(5, 0);     cout << "                                  ...:::::::::------::::::::....                                   ";
	Cursor(5, 1);     cout << "                             ..:::------------------------------:::..                              ";
	Cursor(5, 2);     cout << "                          .::-------=====+++++++++++++++++=====------::..                          ";
	Cursor(5, 3);     cout << "            ......      .:-----==+++++++====------------===+++++++==----:..                        ";
	Cursor(5, 4);     cout << "        .::--------::...:---=+++++=----::------------------------=++++=----. ..:::-----:::..       ";
	Cursor(5, 5);     cout << "     .:----------------:--=+++----:.....:----------------------------=+=---::---------------:.     ";
	Cursor(5, 6);     cout << "    .:-------------------------:........:-----------------------------------------------------.    ";
	Cursor(5, 7);     cout << "   .:--------------------------:........:-----------------------------=+=----------------------:.  ";
	Cursor(5, 8);     cout << "  .:------:.    .:--------==---.........:-----------------------------++=----------....:-------:.. ";
	Cursor(5, 9);     cout << " ..------.        .:------==---.........:-----------------------------++=--------.       .------:. ";
	Cursor(5, 10);    cout << " ..-----:          .:-----==---.........:-----------------------------++=-------.         :-----:. ";
	Cursor(5, 11);    cout << " ..-----:           :-----==---.........:-----------------------------++=------:          .-----:. ";
	Cursor(5, 12);    cout << "  .:-----.          .-----==---.........:-----------------------------++=------.         .:-----:. ";
	Cursor(5, 13);    cout << "  ..-----:.          :----==---:........:----------------------------=++=---::.         ..-----:.  ";
	Cursor(5, 14);    cout << "   .:------..          .-=+=---:.........----------------------------+++=--..          .:------:.  ";
	Cursor(5, 15);    cout << "    .:------:..        .-=++----.........:---------------------------+++=--.         .:-------:.   ";
	Cursor(5, 16);    cout << "      .:-------:..      :-=+----:........:--------------------------=+++--:.      ..:-------:.     ";
	Cursor(5, 17);    cout << "        .:--------:.    .-=+=---:........:--------------------------+++=--:.   ..:--------:.       ";
	Cursor(5, 18);    cout << "         ..:--------:.. .:=++----:.......:-------------------------=+++=--.  .::--------:..        ";
	Cursor(5, 19);    cout << "            .:---------:..-=++---:........:------------------------+++=--:..:---------..           ";
	Cursor(5, 20);    cout << "              ..:-----------=++---:.......:-----------------------=+++---:---------:.              ";
	Cursor(5, 21);    cout << "                 ..:---------+++--:........----------------------=+++-----------:...               ";
	Cursor(5, 22);    cout << "                    ..--------=++--:.......:--------------------=++=----------...                  ";
	Cursor(5, 23);    cout << "                      ..:-------++=-:.......-------------------+++=--------:..                      ";
	Cursor(5, 24);    cout << "                        ..-------=++--......:----------------=+++=-------:..                        ";
	Cursor(5, 25);    cout << "                         .:--------=+=-:.....---------------=++---------:.                          ";
	Cursor(5, 26);    cout << "                     .---:-----::--------:....------------=+------:.-----:.:-.                      ";
	Cursor(5, 27);    cout << "                     .---------  .:--------:...-----------------:.  .--------:                      ";
	Cursor(5, 28);    cout << "                      .------..    .:-------------------------:.      :------.                      ";
	Cursor(5, 29);    cout << "                         ..           .--------------------:..          .....                       ";
	Cursor(5, 30);    cout << "                                         ..:=+++++++++=...                                             ";
	Cursor(5, 31);    cout << "                                           .=+++++++++=                                              ";
	Cursor(5, 32);    cout << "                                           :=========++                                              ";
	Cursor(5, 33);    cout << "                                          .:--..-------.                                             ";
	Cursor(5, 34);    cout << "                                          .:-:..-------.                                             ";
	Cursor(5, 35);    cout << "                                         ..:-:..-------:.                                            ";
	Cursor(5, 36);    cout << "                                         .:--...--------:.                                           ";
	Cursor(5, 37);    cout << "                                       ..:--:...---------:.                                          ";



	Console::ForegroundColor = ConsoleColor::White;
	Cursor(110, 10);
	cout << "PUNTAJE TOTAL DEL NIVEL 1";
	Cursor(110, 13);
	cout << "TIEMPO TRANSCURRIDO:" << cronometro;
	Cursor(110, 16);
	cout << "ENEMIGOS ELIMINADOS: " << contador_eliminados;
	Cursor(110, 25);
	cout << "PUNTAJE TOTAL DEL NIVEL 2";

	Cursor(100, 30);
	cout << "NOS VEMOS HASTA LA PROXIMA ESTUDIANTE";
	Cursor(110, 34);
	cout << "GRACIAS POR JUGAR";
	Cursor(100, 38);
	cout << "PRESIONA CUALQUIER TECLA PARA SALIR DEL JUEGO";
}

/*==========================*/


